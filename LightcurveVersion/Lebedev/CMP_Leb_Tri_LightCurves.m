%% compare synthetic lightcurves, generated by Lebedev Quadrature and Triangularizaiton for Cellinoid
%
%   Edited by LUXP
%   Date: 2016-09-22

function LC_Leb=CMP_Leb_Tri_LightCurves
a1=9;a2=1;b1=4;b2=8;c1=1.5;c2=2.5;
%a1=2;a2=1;b1=0.9;b2=0.9;c1=0.8;c2=0.8;      %ellipsoid
%a1=4;a2=4;b1=4;b2=4;c1=4;c2=4; %sphere
ShowCellinoid(a1,a2,b1,b2,c1,c2);
E = [-2,10,2]';
E0 = [1,5,-1]';
E=E/norm(E); 
E0=E0/norm(E0); 
%%  Generate Lightcurves by Triangularization 
tic;
Prd = 5;    %hour
Nrows = 100; 
LC = GenerateLCTri(a1,a2,b1,b2,c1,c2,Prd, E, E0, Nrows);
Xtime = 0:0.01:2*Prd;
figure,
plot(Xtime, LC,'*');
title('Synthetic Lightcurves of Cellinoid By Triangulation','fontsize',22);
xlabel('Time (Hours)','fontsize',22);
set(gca,'FontName','Times New Roman','FontSize',16,'fontweight','bold');
ylabel('Brightness','fontsize',22);
disp('Time for Triangularization:');
TimeLast = toc

%%  Generate Lightcurves by Lebedev 
tic;
Prd = 5;    %hour
Ndegree = 590;%590; 
LC_Leb = GenerateLCLeb(a1,a2,b1,b2,c1,c2,Prd, E, E0, Ndegree);
Xtime = 0:0.01:2*Prd;
figure,
plot(Xtime, LC_Leb,'*');
title('Synthetic Lightcurves of Cellinoid By Lebedev','fontsize',22);
xlabel('Time (Hours)','fontsize',22);
set(gca,'FontName','Times New Roman','FontSize',16,'fontweight','bold');
ylabel('Brightness','fontsize',22);
disp('Time for Lebedev:');
TimeLast = toc

%%  Compare both lightcurves by relative brightness
figure,
set(gcf,'Position',[100,200,725,770]);
% l1 = LC-(max(LC)+min(LC))/2;
% ll1 = l1/norm(l1);
% l2 = LC_Leb - (max(LC_Leb)+min(LC_Leb))/2;
% ll2 = l2/norm(l2);
plot(Xtime,LC/mean(LC),'r*');hold on;plot(Xtime,LC_Leb/mean(LC_Leb),'bo');
title('Comparison of Synthetic Lightcurves of Cellinoid By Triangulation and Lebedev','fontsize',16);
xlabel('Time (Hours)','fontsize',22);
set(gca,'FontName','Times New Roman','FontSize',16,'fontweight','bold');
ylabel('Relative Brightness','fontsize',22);
legend('Triangularization', 'Lebedev');

figure,
set(gcf,'Position',[100,200,725,770]);
% l1 = LC-(max(LC)+min(LC))/2;
% ll1 = l1/norm(l1);
% l2 = LC_Leb - (max(LC_Leb)+min(LC_Leb))/2;
% ll2 = l2/norm(l2);
plot(Xtime,LC,'r*');hold on;plot(Xtime,LC_Leb,'bo');
title('Comparison of Synthetic Lightcurves of Cellinoid By Triangulation and Lebedev','fontsize',16);
xlabel('Time (Hours)','fontsize',22);
set(gca,'FontName','Times New Roman','FontSize',16,'fontweight','bold');
ylabel('Brightness','fontsize',22);
legend('Triangularization', 'Lebedev');
%% Numerical Test for the best Degree of Lebedev and Best Nrow of Triangularization
%   Best Lebedev: 590
TestOK =0;
if TestOK == 1
    DEGREE=[6, 14, 26, 38, 50, 74, 86, 110, 146, 170, 194, 230, 266, 302, ...
    350, 434, 590, 770, 974, 1202, 1454, 1730, 2030, 2354, 2702, 3074, ... 
 3470, 3890, 4334, 4802, 5294, 5810];
    LCSTD = GenerateLCTri(a1,a2,b1,b2,c1,c2,Prd, E, E0, 100);
    %% for Triangularization
    i = 1;
    FacetsNum = [];
    RelaX2 = [];
    X2 = [];
    for Nrows = 10:5:90
        LC = GenerateLCTri(a1,a2,b1,b2,c1,c2,Prd, E, E0, Nrows);
        RelaX2(i) = norm(LC/norm(LC) - LCSTD/norm(LCSTD));
        X2(i) = norm(LC - LCSTD);
        FacetsNum(i) = 8*Nrows^2;
        i = i+1
    end
    
    %% for Lebedev
    i = 1;
    RelaX2_Leb = [];
    X2_Leb = [];
    FacetsNum_Leb = [];
    for Nrows = 6:32
        LC = GenerateLCLeb(a1,a2,b1,b2,c1,c2,Prd, E, E0, DEGREE(Nrows));
        RelaX2_Leb(i) = norm(LC/norm(LC) - LCSTD/norm(LCSTD));
        X2_Leb(i) = norm(LC - LCSTD);
        FacetsNum_Leb(i) = DEGREE(Nrows);
        i = i+1
    end
figure, 
subplot(1,2,1)
plot(FacetsNum, X2, 'r-');
subplot(1,2,2);
plot(FacetsNum_Leb, X2_Leb, 'b*'); 
title('Best Nrows for Triangulation and Lebedev','fontsize',16);
xlabel('Facets Num','fontsize',22);
set(gca,'FontName','Times New Roman','FontSize',16,'fontweight','bold');
ylabel('X^2','fontsize',22);


figure,
subplot(1,2,1),
plot(FacetsNum, RelaX2, 'r-'); subplot(1,2,2); plot(FacetsNum_Leb, RelaX2_Leb, 'b*');
title('Best Nrows for Triangulation and Lebedev','fontsize',16);
xlabel('Facets Num','fontsize',22);
set(gca,'FontName','Times New Roman','FontSize',16,'fontweight','bold');
ylabel('Relative X^2','fontsize',22);

end

end


%%  Generate Ligthcurves of Cellinoid by Trianularization
function LC = GenerateLCTri(a1,a2,b1,b2,c1,c2,Prd, EE, EE0, Nrows)

AA=[a1,a2,a2,a1,a1,a2,a2,a1]';
BB=[b1,b1,b2,b2,b1,b1,b2,b2]';
CC=[c1,c1,c1,c1,c2,c2,c2,c2]';
[ifp,Theta,Phi] = TriFacetsOctant(Nrows);
%% Compute the X,Y,Z of each nodes of specific cellinoid with AA,BB,CC
% XX=totalnodes*8 corresponding Theta,Phi
TotalNodes=size(Theta,1);
XX=zeros(TotalNodes,8);
YY=zeros(TotalNodes,8);
ZZ=zeros(TotalNodes,8);
for i=1:8    
    XX(:,i)=AA(i)*sin(Theta(:,i)).*cos(Phi(:,i));
    YY(:,i)=BB(i)*sin(Theta(:,i)).*sin(Phi(:,i));
    ZZ(:,i)=CC(i)*cos(Theta(:,i));  
end
     
%% Compute Normal direction of facets for each octant
TotalFacets=size(ifp,2); 
NormalX=zeros(TotalFacets,8);
NormalY=zeros(TotalFacets,8);
NormalZ=zeros(TotalFacets,8);
Farea=zeros(TotalFacets,8); % area of facets for each octant 
%above four octant with a direct normal direction
for i=1:4
    for j=1:TotalFacets
        v1=[XX(ifp(1,j),i),YY(ifp(1,j),i),ZZ(ifp(1,j),i)];
        v2=[XX(ifp(2,j),i),YY(ifp(2,j),i),ZZ(ifp(2,j),i)];
        v3=[XX(ifp(3,j),i),YY(ifp(3,j),i),ZZ(ifp(3,j),i)];
        v12=v2-v1;
        v13=v3-v1;
        normalVec=cross(v12,v13);
        Farea(j,i)=norm(normalVec)/2;
        normalUnit=normalVec/Farea(j,i)/2;
        NormalX(j,i)=normalUnit(1);
        NormalY(j,i)=normalUnit(2);
        NormalZ(j,i)=normalUnit(3);
    end    
end
%below four octant with a reverse normal direction
for i=5:8
    for j=1:TotalFacets
        v1=[XX(ifp(1,j),i),YY(ifp(1,j),i),ZZ(ifp(1,j),i)];
        v2=[XX(ifp(2,j),i),YY(ifp(2,j),i),ZZ(ifp(2,j),i)];
        v3=[XX(ifp(3,j),i),YY(ifp(3,j),i),ZZ(ifp(3,j),i)];
        v12=v2-v1;
        v13=v3-v1;
        normalVec=cross(v12,v13);
        Farea(j,i)=norm(normalVec)/2;
        normalUnit=normalVec/Farea(j,i)/2;
        NormalX(j,i)=-normalUnit(1);
        NormalY(j,i)=-normalUnit(2);
        NormalZ(j,i)=-normalUnit(3);
    end    
end    

%%  Generate the lightcurves 
jdt = 0:0.01:2*Prd;jdt=jdt';
LC = zeros(size(jdt,1),1);
for tt = 1:size(jdt,1)
    PHI=-(jdt(tt)*2*pi/Prd);
    sp=sin(PHI);
    cp=cos(PHI);
    R3PHI=[cp,sp,0;-sp,cp,0;0,0,1];
    E = R3PHI * EE;
    E0 = R3PHI *EE0;
    %% Compute the total brightness integration W.R.T. Normal vector, Facet area and E,E0
    FBrt=zeros(TotalFacets,8);   %Facet Brightness
    for i=1:8
        for j=1:TotalFacets
            mu=E(1)*NormalX(j,i)+E(2)*NormalY(j,i)+E(3)*NormalZ(j,i);
            mu0=E0(1)*NormalX(j,i)+E0(2)*NormalY(j,i)+E0(3)*NormalZ(j,i);
            if mu>0 && mu0>0
                FBrt(j,i)=Farea(j,i)*(mu*mu0*(0.1+1/(mu+mu0)));
            end
        end
    end
    LC(tt)=sum(FBrt(:));
end
end

%%  Generate Ligthcurves of Cellinoid by Lebedev
function [LC] = GenerateLCLeb(a1,a2,b1,b2,c1,c2,Prd, EE, EE0, Ndegree)
leb=getLebedevSphere(Ndegree);
xx=leb.x;
yy=leb.y;
zz=leb.z;
w=leb.w;

G = zeros(Ndegree,1);
NormalVec = zeros(3, Ndegree);
%NormalVec2 = zeros(3,Ndegree);  %ONLY FOR TEST: ACCELLERATION!
for i = 1:Ndegree
    x = xx(i); y = yy(i); z = zz(i);
   if x>=0 && y>=0 && z>=0              % 1st octant
       a = a1; b = b1; c= c1;
   elseif x<0 && y>=0 && z>=0           % 2 octant
       a = a2; b = b1; c= c1;
   elseif x<0 && y < 0 && z>=0         % 3 octant
       a = a2; b = b2; c= c1;
   elseif x>=0 && y<0 && z>=0            % 4 octant
       a = a1; b = b2; c= c1;
   elseif x>=0 && y>=0 && z<0           % 5 octant
       a = a1; b = b1; c= c2;
   elseif x<0 && y>=0 && z<0            % 6 octant
       a = a2; b = b1; c= c2;
   elseif x<0 && y<0 && z<0            % 7 octant
       a = a2; b = b2; c= c2;
   elseif x>=0 && y<0 && z<0             % 8 octant
       a = a1; b = b2; c= c2;
   end
   G(i) = a*b*c*sqrt((x/a)^2+(y/b)^2+(z/c)^2);     %LUXP's Curvature Function
   %test
   %nvec = [x/a, y/b, z/c]';
   %NormalVec(:, i) = nvec/norm(nvec);
   NormalVec(:,i) = [b*c*x, a*c*y, a*b*z]'/G(i);
 %  NormalVec2(:,i) = [b*c*x, a*c*y, a*b*z]';    %ONLY FOR TEST: ACCELLERATION!
end

%%  Generate the lightcurves 
jdt = 0:0.01:2*Prd;jdt=jdt';
LC = zeros(size(jdt,1),1);
%LC2 = zeros(size(jdt,1),1); %ONLY FOR TEST: ACCELLERATION!
for tt = 1:size(jdt,1)
    PHI=-(jdt(tt)*2*pi/Prd);
    sp=sin(PHI);
    cp=cos(PHI);
    %R3PHI=[cp,sp,0;-sp,cp,0;0,0,1];
    %E = R3PHI * EE;
    E = [cp*EE(1)+sp*EE(2), -sp*EE(1)+cp*EE(2), EE(3)]';
    %E0 = R3PHI *EE0;
    E0 = [cp*EE0(1)+sp*EE0(2), -sp*EE0(1)+cp*EE0(2), EE0(3)]';
    %% Compute the total brightness integration W.R.T. Normal vector, Facet area and E,E0
    FBrt=zeros(Ndegree,1);   %Facet Brightness
%    FBrt2=zeros(Ndegree,1);  %ONLY FOR TEST: ACCELLERATION! 
    for i=1:Ndegree
            %mu=E(1)*xx(i)+E(2)*yy(i)+E(3)*zz(i);
            %mu0=E0(1)*xx(i)+E0(2)*yy(i)+E0(3)*zz(i);
%             mu = E'*NormalVec(:,i);
%             mu0 = E0'*NormalVec(:,i);
            mu = E(1)*NormalVec(1,i) + E(2)*NormalVec(2,i) +E(3) * NormalVec(3,i);
            mu0 = E0(1)*NormalVec(1,i) + E0(2)*NormalVec(2,i) +E0(3) * NormalVec(3,i);
            if mu>0 && mu0>0
                FBrt(i)=(mu*mu0*(0.1+1/(mu+mu0)));
            end
            %ONLY FOR TEST: ACCELLERATION!
%             mu = E(1)*NormalVec2(1,i) + E(2)*NormalVec2(2,i) +E(3) * NormalVec2(3,i);
%             mu0 = E0(1)*NormalVec2(1,i) + E0(2)*NormalVec2(2,i) +E0(3) * NormalVec2(3,i);
%             if mu>0 && mu0>0
%                 FBrt2(i)=(mu*mu0*(0.0+1/(mu+mu0)));
%             end
            %ONLY FOR TEST: ACCELLERATION!
    end
    LC(tt)=sum(FBrt.*w.*G);
%    LC2(tt) = sum(FBrt2.*w);    %ONLY FOR TEST: ACCELLERATION!
end

end

%%  Calcualte the standard area of Cellinoid
function Area = CalSurfaceAreaStd(a1,a2,b1,b2,c1,c2)
aa = [a1,a2,a2,a1,a1,a2,a2,a1]';
bb = [b1,b1,b2,b2,b1,b1,b2,b2]';
cc = [c1,c1,c1,c1,c2,c2,c2,c2]';
Area = 0;
for i = 1:8
    a = aa(i); b = bb(i); c = cc(i);
    Sarea=funEllipsoidSurfaceArea(a,b,c);
    Area = Area + Sarea/8;
end
end
%%  Calculate the standard area of Ellipsoid 
function Sarea=funEllipsoidSurfaceArea(a,b,c)
% this function can get the surface area of Ellipsoid with three semi-axies
% a,b,c in a fast way by MATLAB internal function.
% Ref: http://www.matlabsky.com/thread-11891-1-1.html
% Modified by LUXP
% DATE:2011-8-24
syms x y z
F=x^2/a^2+y^2/b^2+z^2/c^2-1;
dzdx=-diff(F,x)/diff(F,z);
dzdy=-diff(F,y)/diff(F,z);
z=solve(F,z);
z=z(1);
fxy=subs(sqrt(1+dzdx^2+dzdy^2));
yleft=-subs(sqrt(1-x^2/a^2)*b);
yright=subs(sqrt(1-x^2/a^2)*b);
Fxy1=char(fxy);
Fxy1=strrep(Fxy1,'/','./');
Fxy1=strrep(Fxy1,'^','.^');
Fxy1=strrep(Fxy1,'*','.*');
Fxy1=eval(['@(x,y)' (Fxy1)]);
yright=char(yright);
yright=strrep(yright,'^','.^');
yright=strrep(yright,'/','./');
yright=strrep(yright,'*','.*');
yright=eval(['@(x)' (yright)]);
S1=2*quad2d(Fxy1,-a,a,0,yright);
Sarea=S1*2;
end


%% Show Cellinoid Shape Model
function ShowCellinoid(a1,a2,b1,b2,c1,c2)
aa=[a1,a2,a2,a1,a1,a2,a2,a1]';
bb=[b1,b1,b2,b2,b1,b1,b2,b2]';
cc=[c1,c1,c1,c1,c2,c2,c2,c2]';
[ifp,Theta,Phi] = TriFacetsOctant(12);
figure,
for i=1:8    
    x=aa(i)*sin(Theta(:,i)).*cos(Phi(:,i));
    y=bb(i)*sin(Theta(:,i)).*sin(Phi(:,i));
    z=cc(i)*cos(Theta(:,i));      
%     plot3(x,y,z,'bo');
%     pause(1);
    trisurf(ifp',x,y,z, x);
    hold on;
end
    quiver3(0,0,0,1,0,0,5,'k','filled','LineWidth',2);
    quiver3(0,0,0,0,1,0,4,'k','filled','LineWidth',2);
    quiver3(0,0,0,0,0,1,3,'k','filled','LineWidth',2);
    
    text(5,0,0,'X','fontsize',14,'fontweight','bold');
    text(0,4,0,'Y','fontsize',14,'fontweight','bold');
    text(0,0,3,'Z','fontsize',14,'fontweight','bold');
    view(0,0);axis off;axis equal;colormap gray;
    title('Cellinoid Shape','fontsize',22,'fontweight','bold');
end

function [ifp,Theta,Phi] = TriFacetsOctant(nrows)
%%  Generate the eight octants data
%	Make the index of all nodes distributing in one octant surface of unit sphere
%   Total number of nodes of each octant with nrows spliting is "(nrows+1)*(nrows+2)/2"
%
%   eg:
%       >> [ifp,Theta,Phi] = TriFacetsOctant(12)
%   Edited by LUXP
%   Date: 2014-08-09

TotalNodes=(nrows+1)*(nrows+2)/2;
nnod=1; % index number of all vertices in one octant from 1 to TotalNodes
nod=zeros(TotalNodes,TotalNodes);

nod(1,1)=nnod;
for row=2:(nrows+1)
    for col=1:row
        nnod=nnod+1;
        nod(row,col)=nnod;       
    end
end

%   set index of three nodes for every trifacet, triangularization
ntri=0;  %index of trifacet with a total number "nrows^2" in one octant
ifp=zeros(3,nrows^2);

for row=1:nrows            
        ntri=ntri+1;
        ifp(1,ntri)=nod(row,1);
        ifp(2,ntri)=nod(row+1,1);
        ifp(3,ntri)=nod(row+1,2);
        
        for col=1:(row-1)
            ntri=ntri+1;
            ifp(1,ntri)=nod(row+1,col+1);
            ifp(2,ntri)=nod(row,col+1);
            ifp(3,ntri)=nod(row,col);
            
            ntri=ntri+1;
            ifp(1,ntri)=nod(row,col+1);
            ifp(2,ntri)=nod(row+1,col+1);
            ifp(3,ntri)=nod(row+1,col+2);            
        end
end

Theta=zeros(TotalNodes,8);
Phi=zeros(TotalNodes,8);
%generate the above part
[Theta(:,1),Phi(:,1)]=GenerateOctant(nrows,0,pi/2,0,pi/2);
[Theta(:,2),Phi(:,2)]=GenerateOctant(nrows,0,pi/2,pi/2,pi);
[Theta(:,3),Phi(:,3)]=GenerateOctant(nrows,0,pi/2,pi,1.5*pi);
[Theta(:,4),Phi(:,4)]=GenerateOctant(nrows,0,pi/2,1.5*pi,2*pi);
%generate the below part
[Theta(:,5),Phi(:,5)]=GenerateOctant(nrows,pi,pi/2,0,pi/2);
[Theta(:,6),Phi(:,6)]=GenerateOctant(nrows,pi,pi/2,pi/2,pi);
[Theta(:,7),Phi(:,7)]=GenerateOctant(nrows,pi,pi/2,pi,1.5*pi);
[Theta(:,8),Phi(:,8)]=GenerateOctant(nrows,pi,pi/2,1.5*pi,2*pi);

end

%% Generate the Decartician Coordinates for one octant with theta in [Theta1, Theta2] and phi in [Phi1, Phi2]
function [vTheta,vPhi]=GenerateOctant(nrows,Theta1,Theta2,Phi1,Phi2)

%Total number of nodes of each octant with nrows spliting is "(nrows+1)*(nrows+2)/2"
TotalNodes=(nrows+1)*(nrows+2)/2;

% spherical coordinates of nodes in the octant
vTheta=zeros(TotalNodes,1);vPhi=zeros(TotalNodes,1);

dth=(Theta2-Theta1)/nrows;
indNodes=1; % first node is the polar position 
vTheta(1)=Theta1;
for i=1:nrows
    dph=(Phi2-Phi1)/i;
    for j=0:i
        indNodes=indNodes+1;
        vTheta(indNodes)=Theta1+i*dth;
        vPhi(indNodes)=Phi1+dph*j;
    end
end
end